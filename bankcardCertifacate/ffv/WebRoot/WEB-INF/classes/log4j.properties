#set log levels  : ALL,debug ,info ,warn,error,FATAL,OFF  （由低到高）。
#FATAL 指出每个严重的错误事件将会导致应用程序的退出 
#ALL 最低级别，用于打开所有日志记录 
#OFF 最高级别，用于关闭所有日志记录
#%c 输出日志信息所属的类的全名 
#%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy-MM-dd HH:mm:ss }，输出类似：2002-10-18 22：10：28 
#%F 输出日志信息所属的类的类名 
#%l 输出日志事件的发生位置，即输出日志信息的语句处于它所在的类的第几行 
#%m 输出代码中指定的信息，如log(message)中的message 
#%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n” 
#%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL。如果是调用debug()输出的，则为DEBUG，依此类推 
#%r 输出自应用启动到输出该日志信息所耗费的毫秒数 
#%t 输出产生该日志事件的线程名
#%x MDC 

###在java类中使用Log log=LogFactory.getLog("appLogger");来输出日志信息,就可以把日志存放到数据库中了
log4j.logger.appLogger = info,db
##输入到数据库表中(sys_log)
log4j.appender.db=com.common.web.log.JDBCPoolAppender
log4j.appender.db.layout=org.apache.log4j.PatternLayout
log4j.appender.db.jndiName=java:comp/env/jdbc/role
log4j.appender.db.sql=INSERT INTO sys_log (id_,logDate_, logLevel_,location_, message_,ip_,place_,name_,userName_) VALUES ('{Primarykey}','%d{ISO8601}', '%-5p', '%C,%L', '%m','%X{ip}','%X{place}','%X{name}','%X{userName}')

log4j.rootLogger = info,stdout,D,E
###jdbc的日志打印到控制台以及文件中
#log4j.logger.org.springframework.jdbc.core.JdbcTemplate=debug
#log4j.logger.org.springframework.jdbc.core.StatementCreatorUtils=debug
# Druid
log4j.logger.druid.sql=debug
log4j.logger.druid.sql.DataSource=warn
log4j.logger.druid.sql.Connection=debug
log4j.logger.druid.sql.Statement=debug
log4j.logger.druid.sql.ResultSet=debug
### 打印到工作台 ###
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target = System.out
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern =%-d{HH:mm:ss} %F---> -%m %n
### 输出到日志文件 ###
log4j.appender.D = org.apache.log4j.DailyRollingFileAppender
log4j.appender.D.File = allLog.log
log4j.appender.D.Append = true
log4j.appender.D.Threshold = DEBUG 
log4j.appender.D.layout = org.apache.log4j.PatternLayout
log4j.appender.D.layout.ConversionPattern = %-d{HH:mm:ss} %F--> %m%n
### 保存异常信息到单独文件 ###
log4j.appender.E = org.apache.log4j.DailyRollingFileAppender
log4j.appender.E.File = error.log
log4j.appender.E.Append = true
log4j.appender.E.Threshold = ERROR
log4j.appender.E.layout = org.apache.log4j.PatternLayout
log4j.appender.E.layout.ConversionPattern = %-d{HH:mm:ss} %F--> %m%n
##
log4j.logger.com.x2x=debug
###struts2的日志信息 
log4j.logger.org=ERROR
log4j.logger.com.opensymphony=ERROR
log4j.logger.freemarker=ERROR
